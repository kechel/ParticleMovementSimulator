/*
 * jpSimulation.java
 *
 * Created on August 23, 2008, 2:45 PM
 */

package de.kechel.particlemovementsimulator.gui;

import de.kechel.particlemovementsimulator.*;
import java.util.*;
import javax.swing.*;
import java.io.*;
import java.text.*;

/**
 *
 * @author  jan
 */
public class jpSimulation extends javax.swing.JPanel implements SimulatorThreadEventListener
{
    
    jpMain mainPointer;
    SimulatorThread st;
    
    /** Creates new form jpSimulation */
    public jpSimulation(jpMain mainPointer) {
        this.mainPointer = mainPointer;
        initComponents();
    }
    public jpSimulation() {
        this.mainPointer = null;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfStepNumberMultiples = new javax.swing.JTextField();
        jcbSaveOnlyStartEndPoints = new javax.swing.JCheckBox();
        jbBrowseOutputDirectory = new javax.swing.JButton();
        jtfOutputDirectory = new javax.swing.JTextField();
        jbStartSimulation = new javax.swing.JButton();
        jlDescription = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jpbProgress = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jlDisplacement = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jlOverallPathLength = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jlAveragePathLength = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jlTotalNumberOfParticles = new javax.swing.JLabel();
        jcbWriteDataFiles = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Save step-number multiples of:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabel2.setForeground(new java.awt.Color(0, 0, 120));
        jLabel2.setText("History options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 5);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Output Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel3, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabel5.setForeground(new java.awt.Color(0, 0, 120));
        jLabel5.setText("Simulation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 5);
        add(jLabel5, gridBagConstraints);

        jtfStepNumberMultiples.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jtfStepNumberMultiples, gridBagConstraints);

        jcbSaveOnlyStartEndPoints.setText("Save only start and end points");
        jcbSaveOnlyStartEndPoints.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jcbSaveOnlyStartEndPoints, gridBagConstraints);

        jbBrowseOutputDirectory.setText("Browse");
        jbBrowseOutputDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBrowseOutputDirectoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jbBrowseOutputDirectory, gridBagConstraints);

        jtfOutputDirectory.setColumns(50);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jtfOutputDirectory, gridBagConstraints);

        jbStartSimulation.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jbStartSimulation.setForeground(new java.awt.Color(0, 0, 120));
        jbStartSimulation.setText("Start Simulation");
        jbStartSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStartSimulationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 5);
        add(jbStartSimulation, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlDescription, gridBagConstraints);

        jLabel8.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel8, gridBagConstraints);

        jLabel9.setText("Progress:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jpbProgress, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        jLabel4.setForeground(new java.awt.Color(0, 0, 120));
        jLabel4.setText("Summary results:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 5);
        add(jLabel4, gridBagConstraints);

        jLabel6.setText("Overall displacement (x, y, z):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlDisplacement, gridBagConstraints);

        jLabel7.setText("Overall path length (x,y,z):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlOverallPathLength, gridBagConstraints);

        jLabel11.setText("Average path length (x,y,z):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlAveragePathLength, gridBagConstraints);

        jLabel10.setText("Total number of particles:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jlTotalNumberOfParticles, gridBagConstraints);

        jcbWriteDataFiles.setText("Write data files to disk and show diagram with gnuplot");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jcbWriteDataFiles, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jbStartSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStartSimulationActionPerformed

        this.jlDisplacement.setText("");
        this.jlOverallPathLength.setText("");
        this.jlAveragePathLength.setText("");
        this.jlTotalNumberOfParticles.setText("");
        
        Properties simprops = mainPointer.getPropertiesFromGui();
        
        st = new SimulatorThread(simprops, this);
        st.start();
}//GEN-LAST:event_jbStartSimulationActionPerformed

    public void SimulatorThreadEvent(String desc, int progress, int status)
    {
        this.jlDescription.setText(desc);
        this.jpbProgress.setValue(progress);
        if( status == SimulatorThread.StatusRunning)
        {
            this.jbStartSimulation.setEnabled(false);
        }
        else
        {
            this.jbStartSimulation.setEnabled(true);
        }
        if( status == SimulatorThread.StatusFinished)
        {
            this.jlDisplacement.setText(String.valueOf(st.displacementx) + ", " + String.valueOf(st.displacementy) + ", " + String.valueOf(st.displacementz));
            this.jlOverallPathLength.setText(String.valueOf(st.pathlengthx) + ", " + String.valueOf(st.pathlengthy) + ", " + String.valueOf(st.pathlengthz));
            this.jlAveragePathLength.setText(String.valueOf(st.pathlengthx / st.realnumberofparticles) + ", " + String.valueOf(st.pathlengthy / st.realnumberofparticles) + ", " + String.valueOf(st.pathlengthz / st.realnumberofparticles));
            this.jlTotalNumberOfParticles.setText(String.valueOf(st.realnumberofparticles));
        }
    }
    
    public void actualizePropertiesFromGui(Properties p)
    {
        p.setProperty("sSaveOnlyStartEndPoints", jcbSaveOnlyStartEndPoints.isSelected() ? "true" : "false");
        p.setProperty("sOutputDirectory", jtfOutputDirectory.getText());
        p.setProperty("sStepNumberMultiples", jtfStepNumberMultiples.getText());
        p.setProperty("sWriteDataFiles", jcbWriteDataFiles.isSelected() ? "true" : "false");
    }
    
    public void actualizeGuiFromProperties(Properties p)
    {
        jcbSaveOnlyStartEndPoints.setSelected(p.getProperty("sSaveOnlyStartEndPoints").equalsIgnoreCase("true") ? true : false);
        jtfOutputDirectory.setText(p.getProperty("sOutputDirectory"));
        jtfStepNumberMultiples.setText(p.getProperty("sStepNumberMultiples"));
        jcbWriteDataFiles.setSelected(p.getProperty("sWriteDataFiles").equalsIgnoreCase("true") ? true: false);
    }
    
    private void jbBrowseOutputDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBrowseOutputDirectoryActionPerformed

        final JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            this.jtfOutputDirectory.setText(fc.getSelectedFile().getAbsolutePath());
        }
        
    }//GEN-LAST:event_jbBrowseOutputDirectoryActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jbBrowseOutputDirectory;
    private javax.swing.JButton jbStartSimulation;
    private javax.swing.JCheckBox jcbSaveOnlyStartEndPoints;
    private javax.swing.JCheckBox jcbWriteDataFiles;
    private javax.swing.JLabel jlAveragePathLength;
    private javax.swing.JLabel jlDescription;
    private javax.swing.JLabel jlDisplacement;
    private javax.swing.JLabel jlOverallPathLength;
    private javax.swing.JLabel jlTotalNumberOfParticles;
    private javax.swing.JProgressBar jpbProgress;
    private javax.swing.JTextField jtfOutputDirectory;
    private javax.swing.JTextField jtfStepNumberMultiples;
    // End of variables declaration//GEN-END:variables
    
}
